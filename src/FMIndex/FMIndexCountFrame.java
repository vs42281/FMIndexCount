/*
 * Author:
 *
 *      Vedran Sabadoš
 *
 * Version:
 *
 *      V1.0         26. 12. 2013
 */

package FMIndex;

import java.awt.Font;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.FontUIResource;

/**
 * Class FMIndexCountFrame is FMIndexCount application's main class. It is
 * generated as NetBeans' JFrameForm template and is updated automatically
 * during form design.
 *
 * @version     V1.0                26.12.2013.
 * @author      Vedran Sabadoš
 */
public class FMIndexCountFrame extends javax.swing.JFrame {

    // <editor-fold desc="Fields">

    /**
     * Instance of reference sequence object, the object the query sequences
     * are compared with.
     */
    ReferenceSequence referenceSequence;

    /** Thread object for reference sequence object creation */
    ReferenceSequenceCreationThread referenceSequenceCreationThread;

    /** Filename of reference sequence file */
    private String inFilename;


    /** Fasta file format filter */
    FileNameExtensionFilter filterFastaFileFormat = new FileNameExtensionFilter("Fasta datoteke (.fa)", "fa");

    /** Text file format filter */
    FileNameExtensionFilter filterTextFileFormat = new FileNameExtensionFilter("Tekst datoteke (.txt)", "txt");

    /** FMIndexCount preprocessed file format filter */
    FileNameExtensionFilter filterFMIndexCountPreprocessedFileFormat = new FileNameExtensionFilter("Predobrađene datoteke referentnog slijeda (.rfix)", "rfix");


    /** State of reference sequence object flag */
    boolean referenceSequenceOK = false;

    /** True if reference sequence is in process of creation */
    boolean referenceSequenceCreationInProgress = false;
    // </editor-fold>

    // <editor-fold desc="Initialization code">
    /**
     * Creates new form FMIndexCountFrame
     */
    public FMIndexCountFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        referenceSequencePreprocessingSelectionButtonGroup = new javax.swing.ButtonGroup();
        referenceSequenceFileFormatButtonGroup = new javax.swing.ButtonGroup();
        referenceSequenceFileChooser = new javax.swing.JFileChooser();
        selectReferenceSequenceFileFormatPanel = new javax.swing.JPanel();
        preprocessedReferenceSequenceFileFormatRadioButton = new javax.swing.JRadioButton();
        rawReferenceSequenceFileFormatRadioButton = new javax.swing.JRadioButton();
        fastaReferenceSequenceFileFormatRadioButton = new javax.swing.JRadioButton();
        textReferenceSequenceFileFormatRadioButton = new javax.swing.JRadioButton();
        referenceSequenceNameLabel = new javax.swing.JLabel();
        referenceSequenceNameTextField = new javax.swing.JTextField();
        selectReferenceSequenceFilenamePanel = new javax.swing.JPanel();
        referenceSequenceFilenameLabel = new javax.swing.JLabel();
        referenceSequenceFilenameTextField = new javax.swing.JTextField();
        browseReferenceSequenceFilenameButton = new javax.swing.JButton();
        getReferenceSequenceButton = new javax.swing.JButton();
        saveReferenceSequenceButton = new javax.swing.JButton();
        referenceSequenceOKCheckBox = new javax.swing.JCheckBox();
        referenceSequenceCreationProgressBar = new javax.swing.JProgressBar();
        referenceSequenceCreationCancelButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        querySequencePanel = new javax.swing.JPanel();
        querySequenceScrollPane = new javax.swing.JScrollPane();
        querySequenceTextArea = new javax.swing.JTextArea();
        querySequenceStartSearchButton = new javax.swing.JButton();
        querySequenceSearchResultLabel = new javax.swing.JLabel();
        querySequenceSearchResultTextField = new javax.swing.JTextField();
        querySequenceLabel = new javax.swing.JLabel();

        referenceSequenceFileChooser.setApproveButtonText("Open");
        referenceSequenceFileChooser.setDialogTitle("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FMIndexCount");

        selectReferenceSequenceFileFormatPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        referenceSequencePreprocessingSelectionButtonGroup.add(preprocessedReferenceSequenceFileFormatRadioButton);
        preprocessedReferenceSequenceFileFormatRadioButton.setText("Predobrađeni referentni slijed");
        preprocessedReferenceSequenceFileFormatRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preprocessedReferenceSequenceFileFormatRadioButtonActionPerformed(evt);
            }
        });

        referenceSequencePreprocessingSelectionButtonGroup.add(rawReferenceSequenceFileFormatRadioButton);
        rawReferenceSequenceFileFormatRadioButton.setSelected(true);
        rawReferenceSequenceFileFormatRadioButton.setText("Neobrađeni referentni slijed");
        rawReferenceSequenceFileFormatRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rawReferenceSequenceFileFormatRadioButtonActionPerformed(evt);
            }
        });

        referenceSequenceFileFormatButtonGroup.add(fastaReferenceSequenceFileFormatRadioButton);
        fastaReferenceSequenceFileFormatRadioButton.setSelected(true);
        fastaReferenceSequenceFileFormatRadioButton.setText("Fasta format");
        fastaReferenceSequenceFileFormatRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaReferenceSequenceFileFormatRadioButtonActionPerformed(evt);
            }
        });

        referenceSequenceFileFormatButtonGroup.add(textReferenceSequenceFileFormatRadioButton);
        textReferenceSequenceFileFormatRadioButton.setText("Tekst format");
        textReferenceSequenceFileFormatRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textReferenceSequenceFileFormatRadioButtonActionPerformed(evt);
            }
        });

        referenceSequenceNameLabel.setText("Ime referentnog slijeda:");

        javax.swing.GroupLayout selectReferenceSequenceFileFormatPanelLayout = new javax.swing.GroupLayout(selectReferenceSequenceFileFormatPanel);
        selectReferenceSequenceFileFormatPanel.setLayout(selectReferenceSequenceFileFormatPanelLayout);
        selectReferenceSequenceFileFormatPanelLayout.setHorizontalGroup(
            selectReferenceSequenceFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectReferenceSequenceFileFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectReferenceSequenceFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectReferenceSequenceFileFormatPanelLayout.createSequentialGroup()
                        .addComponent(rawReferenceSequenceFileFormatRadioButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(selectReferenceSequenceFileFormatPanelLayout.createSequentialGroup()
                        .addGroup(selectReferenceSequenceFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(selectReferenceSequenceFileFormatPanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(selectReferenceSequenceFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(selectReferenceSequenceFileFormatPanelLayout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(referenceSequenceNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(referenceSequenceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(textReferenceSequenceFileFormatRadioButton)
                                    .addComponent(fastaReferenceSequenceFileFormatRadioButton)))
                            .addComponent(preprocessedReferenceSequenceFileFormatRadioButton))
                        .addGap(0, 11, Short.MAX_VALUE))))
        );
        selectReferenceSequenceFileFormatPanelLayout.setVerticalGroup(
            selectReferenceSequenceFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectReferenceSequenceFileFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rawReferenceSequenceFileFormatRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fastaReferenceSequenceFileFormatRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectReferenceSequenceFileFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceSequenceNameLabel)
                    .addComponent(referenceSequenceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textReferenceSequenceFileFormatRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preprocessedReferenceSequenceFileFormatRadioButton)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        selectReferenceSequenceFilenamePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        referenceSequenceFilenameLabel.setText("Ime datoteke referentnog slijeda:");

        browseReferenceSequenceFilenameButton.setText("Odaberi");
        browseReferenceSequenceFilenameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseReferenceSequenceFilenameButtonActionPerformed(evt);
            }
        });

        getReferenceSequenceButton.setText("Učitaj referentni slijed");
        getReferenceSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getReferenceSequenceButtonActionPerformed(evt);
            }
        });

        saveReferenceSequenceButton.setText("Spremi referentni slijed");
        saveReferenceSequenceButton.setEnabled(false);
        saveReferenceSequenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReferenceSequenceButtonActionPerformed(evt);
            }
        });

        referenceSequenceOKCheckBox.setText("Ispravnost indeksa referentnog slijeda:");
        referenceSequenceOKCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        referenceSequenceOKCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceSequenceOKCheckBoxActionPerformed(evt);
            }
        });

        referenceSequenceCreationProgressBar.setEnabled(false);

        referenceSequenceCreationCancelButton.setText("Prekini učitavanje");
        referenceSequenceCreationCancelButton.setEnabled(false);
        referenceSequenceCreationCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceSequenceCreationCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectReferenceSequenceFilenamePanelLayout = new javax.swing.GroupLayout(selectReferenceSequenceFilenamePanel);
        selectReferenceSequenceFilenamePanel.setLayout(selectReferenceSequenceFilenamePanelLayout);
        selectReferenceSequenceFilenamePanelLayout.setHorizontalGroup(
            selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectReferenceSequenceFilenamePanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(referenceSequenceCreationCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(getReferenceSequenceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectReferenceSequenceFilenamePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveReferenceSequenceButton))
                    .addComponent(referenceSequenceCreationProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53))
            .addGroup(selectReferenceSequenceFilenamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(referenceSequenceOKCheckBox)
                    .addGroup(selectReferenceSequenceFilenamePanelLayout.createSequentialGroup()
                        .addComponent(referenceSequenceFilenameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(referenceSequenceFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseReferenceSequenceFilenameButton)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        selectReferenceSequenceFilenamePanelLayout.setVerticalGroup(
            selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectReferenceSequenceFilenamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceSequenceFilenameLabel)
                    .addComponent(referenceSequenceFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseReferenceSequenceFilenameButton))
                .addGap(18, 18, 18)
                .addGroup(selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getReferenceSequenceButton)
                    .addComponent(saveReferenceSequenceButton)
                    .addComponent(referenceSequenceOKCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(selectReferenceSequenceFilenamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(referenceSequenceCreationProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(referenceSequenceCreationCancelButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(19, 19, 19))
        );

        exitButton.setText("Izlaz");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        querySequencePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        querySequenceTextArea.setEditable(false);
        querySequenceTextArea.setColumns(25);
        querySequenceTextArea.setLineWrap(true);
        querySequenceTextArea.setRows(5);
        querySequenceScrollPane.setViewportView(querySequenceTextArea);

        querySequenceStartSearchButton.setText("Pretraži");
        querySequenceStartSearchButton.setEnabled(false);
        querySequenceStartSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                querySequenceStartSearchButtonActionPerformed(evt);
            }
        });

        querySequenceSearchResultLabel.setText("Broj pronađenih podudaranja:");

        querySequenceSearchResultTextField.setEditable(false);

        querySequenceLabel.setText("Upitni slijed:");

        javax.swing.GroupLayout querySequencePanelLayout = new javax.swing.GroupLayout(querySequencePanel);
        querySequencePanel.setLayout(querySequencePanelLayout);
        querySequencePanelLayout.setHorizontalGroup(
            querySequencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(querySequencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(querySequencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(querySequenceScrollPane)
                    .addGroup(querySequencePanelLayout.createSequentialGroup()
                        .addGroup(querySequencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(querySequencePanelLayout.createSequentialGroup()
                                .addComponent(querySequenceStartSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106)
                                .addComponent(querySequenceSearchResultLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(querySequenceSearchResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(querySequenceLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        querySequencePanelLayout.setVerticalGroup(
            querySequencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(querySequencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(querySequenceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(querySequenceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(querySequencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(querySequenceStartSearchButton)
                    .addComponent(querySequenceSearchResultLabel)
                    .addComponent(querySequenceSearchResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(querySequencePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectReferenceSequenceFileFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectReferenceSequenceFilenamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(exitButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectReferenceSequenceFileFormatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectReferenceSequenceFilenamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(querySequencePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // </editor-fold>

    // <editor-fold desc="Local functions">

    /**
     * Function calculateControlState calculates enabled/disabled states of
     * form controls in accordance with current state of application and 
     * form controls.
     */
    private void calculateControlState() {
        if (referenceSequenceCreationInProgress) {
            rawReferenceSequenceFileFormatRadioButton.setEnabled(false);
            preprocessedReferenceSequenceFileFormatRadioButton.setEnabled(false);
            fastaReferenceSequenceFileFormatRadioButton.setEnabled(false);
            textReferenceSequenceFileFormatRadioButton.setEnabled(false);
            referenceSequenceNameTextField.setEnabled(false);

            referenceSequenceFilenameTextField.setEditable(false);
            browseReferenceSequenceFilenameButton.setEnabled(false);
            getReferenceSequenceButton.setEnabled(false);
            saveReferenceSequenceButton.setEnabled(false);
            referenceSequenceCreationCancelButton.setEnabled(true);
            referenceSequenceCreationProgressBar.setEnabled(true);

            querySequenceTextArea.setEditable(false);
            querySequenceStartSearchButton.setEnabled(false);
        } else {
            rawReferenceSequenceFileFormatRadioButton.setEnabled(true);
            preprocessedReferenceSequenceFileFormatRadioButton.setEnabled(true);
            if (rawReferenceSequenceFileFormatRadioButton.isSelected()) {
                fastaReferenceSequenceFileFormatRadioButton.setEnabled(true);
                textReferenceSequenceFileFormatRadioButton.setEnabled(true);
                referenceSequenceNameTextField.setEnabled(false);
                if (fastaReferenceSequenceFileFormatRadioButton.isSelected()) {
                    referenceSequenceNameTextField.setEnabled(true);
                } else {
                    referenceSequenceNameTextField.setEnabled(false);
                }
            } else {
                fastaReferenceSequenceFileFormatRadioButton.setEnabled(false);
                textReferenceSequenceFileFormatRadioButton.setEnabled(false);
                referenceSequenceNameTextField.setEnabled(false);
            }

            referenceSequenceFilenameTextField.setEditable(true);
            browseReferenceSequenceFilenameButton.setEnabled(true);
            getReferenceSequenceButton.setEnabled(true);
            if (referenceSequenceOK) {
                saveReferenceSequenceButton.setEnabled(true);
            } else {
                saveReferenceSequenceButton.setEnabled(false);
            }
            referenceSequenceCreationCancelButton.setEnabled(false);
            referenceSequenceCreationProgressBar.setEnabled(false);

            if (referenceSequenceOK) {
                querySequenceTextArea.setEditable(true);
                querySequenceStartSearchButton.setEnabled(true);
            } else {
                querySequenceTextArea.setEditable(false);
                querySequenceStartSearchButton.setEnabled(false);
            }
        }
    }

    /**
     * Function saveFilename saves input file name (without extension) of file
     * reference sequence is build upon.
     * 
     * @param filename      filename of input file
     */
    private void saveFilename(String filename) {

        int lastDotIndex;

        lastDotIndex = filename.lastIndexOf('.');
        if (lastDotIndex < 0) {
            lastDotIndex = filename.length();
        }
        inFilename = filename.substring(0, lastDotIndex);
    }

    /**
     * Function setProgressBarValue sets reference sequence creation progress
     * bar position.
     * 
     * @param value     Value of the progress bar
     */
    public void setProgressBarValue(int value){
        referenceSequenceCreationProgressBar.setValue(value);
    }

    /**
     * Function setProgressBarMaximum sets reference sequence creation progress
     * bar value that corresponds to 100%.
     * 
     * @param maximum       Value that corresponds to 100%
     */
    public void setProgressBarMaximum(int maximum){
        referenceSequenceCreationProgressBar.setMaximum(maximum);
    }

    /**
     * Function setProgressBarIndeterminated sets the indeterminate status of
     * reference sequence progress bar.
     * 
     * @param indeterminate     indeterminate status of progress bar
     */
    public void setProgressBarIndeterminate(boolean indeterminate) {
        referenceSequenceCreationProgressBar.setIndeterminate(indeterminate);
    }

    /**
     * Function getExceptionType provides the type of exception
     * 
     * @param   ex    exception which type is to be determined
     */
    private String getExceptionType (Exception ex) {

        String exceptionFullName;
        int lastDotIndex;

        exceptionFullName = ex.getClass().toString();
        lastDotIndex = exceptionFullName.lastIndexOf('.');
        if (lastDotIndex < 0) {
            lastDotIndex = 0;
        } else {
            lastDotIndex++;
        }
        return exceptionFullName.substring(lastDotIndex);
    }

    /**
     * Function reportError reports execution errors by opening confirmation
     * window with appropriate message.
     * 
     * @param   text    message to be reported in confirmation window
     */
    private void reportError (String text) {
        JOptionPane.showConfirmDialog(null, text, "FMIndexCount", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
    }
    // </editor-fold>

    // <editor-fold desc="Form control events">
    private void rawReferenceSequenceFileFormatRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rawReferenceSequenceFileFormatRadioButtonActionPerformed
        calculateControlState();
    }//GEN-LAST:event_rawReferenceSequenceFileFormatRadioButtonActionPerformed

    private void preprocessedReferenceSequenceFileFormatRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preprocessedReferenceSequenceFileFormatRadioButtonActionPerformed
        calculateControlState();
    }//GEN-LAST:event_preprocessedReferenceSequenceFileFormatRadioButtonActionPerformed

    private void fastaReferenceSequenceFileFormatRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaReferenceSequenceFileFormatRadioButtonActionPerformed
        calculateControlState();
    }//GEN-LAST:event_fastaReferenceSequenceFileFormatRadioButtonActionPerformed

    private void textReferenceSequenceFileFormatRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textReferenceSequenceFileFormatRadioButtonActionPerformed
        calculateControlState();
    }//GEN-LAST:event_textReferenceSequenceFileFormatRadioButtonActionPerformed

    private void browseReferenceSequenceFilenameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseReferenceSequenceFilenameButtonActionPerformed

        String filename;
        int returnValue;

        referenceSequenceFileChooser.resetChoosableFileFilters();
        referenceSequenceFileChooser.setDialogTitle("Open");
        referenceSequenceFileChooser.setApproveButtonText("Open");
        referenceSequenceFileChooser.setSelectedFile(new java.io.File(""));
        if (preprocessedReferenceSequenceFileFormatRadioButton.isSelected()) {
            referenceSequenceFileChooser.setFileFilter(filterFMIndexCountPreprocessedFileFormat);
        } else if (fastaReferenceSequenceFileFormatRadioButton.isSelected()) {
            referenceSequenceFileChooser.setFileFilter(filterFastaFileFormat);
        } else {
            referenceSequenceFileChooser.setFileFilter(filterTextFileFormat);
	}

        returnValue = referenceSequenceFileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            filename = referenceSequenceFileChooser.getSelectedFile().getAbsolutePath();
            referenceSequenceFilenameTextField.setText(filename);
        }
    }//GEN-LAST:event_browseReferenceSequenceFilenameButtonActionPerformed

    private void getReferenceSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getReferenceSequenceButtonActionPerformed

        /* check if previous reference sequence creation thread is still active */
        if (referenceSequenceCreationThread != null) {
            if (referenceSequenceCreationThread.isAlive()) {
                return;
            }
        }

        /* save filename */
        saveFilename(referenceSequenceFilenameTextField.getText());

        /* start reference sequence creation in new thread */
        referenceSequenceOK = false;
        referenceSequenceOKCheckBox.setSelected(referenceSequenceOK);
        referenceSequenceCreationInProgress = true;
        referenceSequenceCreationThread = new ReferenceSequenceCreationThread(this);
        referenceSequenceCreationThread.start();

        /* refresh form controls */
        calculateControlState();
    }//GEN-LAST:event_getReferenceSequenceButtonActionPerformed

    private void saveReferenceSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReferenceSequenceButtonActionPerformed

        String filename;
        int returnValue;

        referenceSequenceFileChooser.resetChoosableFileFilters();
        referenceSequenceFileChooser.setDialogTitle("Save as");
        referenceSequenceFileChooser.setApproveButtonText("Save");
        referenceSequenceFileChooser.setSelectedFile(new java.io.File(inFilename + ".rfix"));
        referenceSequenceFileChooser.setFileFilter(filterFMIndexCountPreprocessedFileFormat);

        returnValue = referenceSequenceFileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            filename = referenceSequenceFileChooser.getSelectedFile().getAbsolutePath();
            try {
                referenceSequence.saveReferenceSequenceIndex(filename);
            } catch (ReportedException ex) {
            } catch (Exception ex) {
                reportError(    "Neočekivana pogreška tijekom spremanja referentnog slijeda ("
                                + getExceptionType(ex)
                                + "):\n\n    "
                                + ex.getMessage()                                               );
            }
        }
    }//GEN-LAST:event_saveReferenceSequenceButtonActionPerformed

    private void referenceSequenceOKCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenceSequenceOKCheckBoxActionPerformed
        referenceSequenceOKCheckBox.setSelected(referenceSequenceOK);
    }//GEN-LAST:event_referenceSequenceOKCheckBoxActionPerformed

    private void referenceSequenceCreationCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenceSequenceCreationCancelButtonActionPerformed

        /* check if reference sequence creation thread is still active */
        if (referenceSequenceCreationThread != null) {
            if (referenceSequenceCreationThread.isAlive()) {
                referenceSequenceCreationThread.interrupt();
            }
        }
    }//GEN-LAST:event_referenceSequenceCreationCancelButtonActionPerformed

    private void querySequenceStartSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_querySequenceStartSearchButtonActionPerformed

        int result;

        result = 0;
        try {
            result = referenceSequence.countQuerySequenceOccurrences(querySequenceTextArea.getText());
        } catch (ReportedException ex) {
        } catch (Exception ex) {
            reportError(    "Neočekivana pogreška tijekom obrade upita ("
                            + getExceptionType(ex)
                            + "):\n\n    "
                            + ex.getMessage()                               );
            result = 0;
        }
        querySequenceSearchResultTextField.setText(Integer.toString(result));
    }//GEN-LAST:event_querySequenceStartSearchButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    // </editor-fold>

    // <editor-fold desc="Reference sequence creation thred">
    /**
     * Class ReferenceSequenceCreationThread is used to create thread for
     * reference sequence creation. Because reference sequence creation is long
     * run process, it is done in separate thread to enable application form to
     * respond to user commands, specially to "Cancel" command.
     *
     * @version     V1.0                26.12.2013.
     * @author      Vedran Sabadoš
     */
    private class ReferenceSequenceCreationThread extends Thread {

        // <editor-fold desc="Fields">

        /** Parent frame reference */
        FMIndexCountFrame parentFrame;
        // </editor-fold>

        // <editor-fold desc="Constructor">

        /**
         * Constructor for class ReferenceSequenceCreationThread
         * 
         * @param parent    Reference for parent frame
         */
        private ReferenceSequenceCreationThread(FMIndexCountFrame parent) {
            parentFrame = parent;
        }
        // </editor-fold>

        // <editor-fold desc="Methods">

        /** Thread run function */
        @Override
        public void run() {

            ReferenceSequence.ReferenceSequenceFormat referenceSequenceFormat;

            /* select reference sequence file type */
            referenceSequenceFormat = ReferenceSequence.ReferenceSequenceFormat.PREPROCESSED;
            if (rawReferenceSequenceFileFormatRadioButton.isSelected()) {
                referenceSequenceFormat = ReferenceSequence.ReferenceSequenceFormat.FASTA;
                if (textReferenceSequenceFileFormatRadioButton.isSelected()) {
                    referenceSequenceFormat = ReferenceSequence.ReferenceSequenceFormat.TEXT;
                }
            }

            /* create reference sequence object */
            try {
                referenceSequence = null;
                referenceSequence = new ReferenceSequence(  referenceSequenceFilenameTextField.getText(),
                                                            referenceSequenceFormat,
                                                            referenceSequenceNameTextField.getText(),
                                                            parentFrame                                     );
            } catch (ReportedException ex) {
            } catch (Exception ex) {
                reportError(    "Neočekivana pogreška tijekom kreiranja referentnog slijeda ("
                                + getExceptionType(ex)
                                + "):\n\n    "
                                + ex.getMessage()                                               );
            } finally {

                /* refresh application form controls */
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        if (referenceSequence != null) {
                            referenceSequenceOK = true;
                        }
                        referenceSequenceOKCheckBox.setSelected(referenceSequenceOK);
                        referenceSequenceCreationInProgress = false;
                        setProgressBarValue(0);
                        setProgressBarIndeterminate(false);
                        calculateControlState();
                    }
                });            
            }
        }
        // </editor-fold>
    }
    // </editor-fold>

    // <editor-fold desc="main function">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Monospaced", Font.PLAIN, 13)));
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FMIndexCountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FMIndexCountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FMIndexCountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FMIndexCountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @SuppressWarnings("override")
            public void run() {
                new FMIndexCountFrame().setVisible(true);
            }
        });
    }
    // </editor-fold>

    // <editor-fold desc="Form object declarations">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseReferenceSequenceFilenameButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton fastaReferenceSequenceFileFormatRadioButton;
    private javax.swing.JButton getReferenceSequenceButton;
    private javax.swing.JRadioButton preprocessedReferenceSequenceFileFormatRadioButton;
    private javax.swing.JLabel querySequenceLabel;
    private javax.swing.JPanel querySequencePanel;
    private javax.swing.JScrollPane querySequenceScrollPane;
    private javax.swing.JLabel querySequenceSearchResultLabel;
    private javax.swing.JTextField querySequenceSearchResultTextField;
    private javax.swing.JButton querySequenceStartSearchButton;
    private javax.swing.JTextArea querySequenceTextArea;
    private javax.swing.JRadioButton rawReferenceSequenceFileFormatRadioButton;
    private javax.swing.JButton referenceSequenceCreationCancelButton;
    private javax.swing.JProgressBar referenceSequenceCreationProgressBar;
    private javax.swing.JFileChooser referenceSequenceFileChooser;
    private javax.swing.ButtonGroup referenceSequenceFileFormatButtonGroup;
    private javax.swing.JLabel referenceSequenceFilenameLabel;
    private javax.swing.JTextField referenceSequenceFilenameTextField;
    private javax.swing.JLabel referenceSequenceNameLabel;
    private javax.swing.JTextField referenceSequenceNameTextField;
    private javax.swing.JCheckBox referenceSequenceOKCheckBox;
    private javax.swing.ButtonGroup referenceSequencePreprocessingSelectionButtonGroup;
    private javax.swing.JButton saveReferenceSequenceButton;
    private javax.swing.JPanel selectReferenceSequenceFileFormatPanel;
    private javax.swing.JPanel selectReferenceSequenceFilenamePanel;
    private javax.swing.JRadioButton textReferenceSequenceFileFormatRadioButton;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
